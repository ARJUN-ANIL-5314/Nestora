saga 
import { takeEvery, call, put } from 'redux-saga/effects';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import auth from 'container/auth';
import config from 'config';

import {
  loginSuccess,
  loginFail,
  loginUserSuccess,
  loginUser,
  loginUserFail,

} from './slice';



function* login(action) {
  console.log('======action======', action.payload);

  try {
    const response = yield fetch(`http://localhost:3002/login`, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: action.payload.email,
        password: action.payload.password,
      }),

  

    });

    if (!response.ok) {
      const errorResponse = yield response.json(); 
      console.log("API Error Response:", errorResponse);

      yield toast.error(errorResponse.message || 'Invalid User', { autoClose: 5000 });
      throw new Error(errorResponse.message || "Invalid User"); 
    }

    const resJSON = yield response.json();
    console.log('===============resJSON=====================', resJSON);

    yield localStorage.setItem(process.env.REACT_APP_TOKEN, resJSON.token);
    yield put(loginSuccess(resJSON));
    yield put(loginUser(action.payload));

  } catch (error) {
    console.log("Caught Error:", error); 
    yield put(loginFail(error.message));

    yield toast.error(error.message, { autoClose: 3000 });
  }
}


function* loginUserDetail(action) {
  console.log('Action.playlodellll', action.payload);
  try {
    let params = {
      api: `${config.Ip}/user-details`,
      method: 'GET',
      successAction: loginUserSuccess(),
      failAction: loginUserFail('Login failed. Please try again.'),
      authourization: 'token'
    };

    let res = yield call(auth.basicApi, params);
    console.log("==res==", res);
    if (
      res &&
      [
        'admin',
        'vendor',

      ].includes(res.role)
    ) {

      let user = {
        user: res
      };
      console.log('======res.role==========', res.role);

      yield localStorage.setItem(process.env.REACT_APP_LOGINUSER, JSON.stringify(user));

      // Navigate to different dashboards based on user roles
      switch (res?.role) {
        case 'admin':
           console.log("role check :",res?.role);
           
          yield action.payload.navigate('/admin-dashboard');
        
          

          break;
        case 'vendor':

          yield action.payload.navigate('/dashboard');

      }
      yield put(loginUser({ role: res.role }));

      yield toast.success('Login Successfull', {
        autoClose: 3000
      });
    }
  } catch (error) {
    if (error.status && error.message) {
      yield toast.error(error.message, {
        autoClose: 3000
      });
    }
  }
}



export default function* LoginActionWatcher() {
  yield takeEvery('login/userLogin', login);
  yield takeEvery('login/loginUser', loginUserDetail);
 
}


slice 
import { createSlice } from '@reduxjs/toolkit';

const loginSlice = createSlice({
  name: 'login',
  initialState: {
    userData: {},
    data: {},
    user: {},
    userDatas: {},
    datas: {},
    changePass: {},
    loading: false,
    error: null
  },
  reducers: {
    userLogin: (state) => {
      state.loading = true;
      state.error = null;
    },
    loginSuccess: (state, action) => {
      state.loading = false;
      state.data = action.payload;
    },
    loginFail: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    loginUser: (state) => {
      state.loading = true;
      state.error = null;
    },
    loginUserSuccess: (state, action) => {
      state.loading = false;
      state.user = action.payload;
    },
    loginUserFail: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },

  }
});

export const {
  userLogin,
  loginSuccess,
  loginFail,
  loginUser,
  loginUserSuccess,
  loginUserFail,
  
} = loginSlice.actions;
export const selectError = (state) => state.login.error;

export default loginSlice.reducer;



componet 
import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate, Link } from 'react-router-dom';
import { Box, Button, FormControl, FormHelperText, IconButton, InputAdornment, OutlinedInput, Stack, Typography } from '@mui/material';
import * as Yup from 'yup';
import { Formik } from 'formik';
import AnimateButton from 'ui-component/extended/AnimateButton';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import { userLogin } from '../../../../container/LoginContainer/slice';


const FirebaseLogin = ({ ...others }) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [showPassword, setShowPassword] = useState(false);
  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const handleMouseDownPassword = (event) => {
    event.preventDefault();
  };

  return (
    <Formik
      initialValues={{
        email: '',
        password: ''
      }}
      validationSchema={Yup.object().shape({
        email: Yup.string()
        .email('Must be a valid email address') 
        .required('Email is required'),
        password: Yup.string().required('Password is required')
      })}
      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {
        try {
          setStatus({ success: true });
          setSubmitting(false);
          const value = {
            ...values,
            navigate
          };
          dispatch(userLogin(value));
        } catch (err) {
          console.error(err);
          setStatus({ success: false });
          setErrors({ submit: err.message });
          setSubmitting(false);
        }
      }}
    >
      {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (
        <form noValidate onSubmit={handleSubmit} {...others} >
          <FormControl fullWidth error={Boolean(touched.email && errors.email)}>
            <Box sx={{ mb: 1 }}>
              <Typography variant="body1">Email</Typography>
            </Box>
            <OutlinedInput style={{ padding: '4px' }} value={values.email} name="email" onBlur={handleBlur} onChange={handleChange} />
            {touched.email && errors.email && <FormHelperText error>{errors.email}</FormHelperText>}
          </FormControl>

          <FormControl fullWidth error={Boolean(touched.password && errors.password)}>
            <Box sx={{ mb: 1, mt: 3 }}>
              <Typography variant="body1">Password</Typography>
            </Box>
            <OutlinedInput
              style={{ padding: '4px' }}
              type={showPassword ? 'text' : 'password'}
              value={values.password}
              name="password"
              onBlur={handleBlur}
              onChange={handleChange}
              endAdornment={
                <InputAdornment position="end">
                  <IconButton
                    aria-label="toggle password visibility"
                    onClick={handleClickShowPassword}
                    onMouseDown={handleMouseDownPassword}
                  >
                    {showPassword ? <Visibility /> : <VisibilityOff />}
                  </IconButton>
                </InputAdornment>
              }
            />
            {touched.password && errors.password && <FormHelperText error>{errors.password}</FormHelperText>}
          </FormControl>

          <Stack direction="row" alignItems="center" justifyContent="space-between" spacing={1}>
            <Typography
              variant="subtitle1"
              color="secondary"
              component={Link}
              to="/forgot-password"
              style={{ marginTop: '20px', fontWeight: 'bold' }}
              sx={{ textDecoration: 'none', cursor: 'pointer' }}
            >
              Forgot Password?
            </Typography>
          </Stack>

          {errors.submit && (
            <Box sx={{ mt: 3 }}>
              <FormHelperText error>{errors.submit}</FormHelperText>
            </Box>
          )}

          <Box sx={{ mt: 2 }}>
            <AnimateButton>
              <Button disableElevation disabled={isSubmitting} fullWidth size="large" type="submit" variant="contained" className='!impotant bg-dark-b hover:bg-blue-400 hover:text-dark-b '>
                Login
              </Button>
            </AnimateButton>
          </Box>
        </form>
      )}
    </Formik>
  );
};

export default FirebaseLogin;


auth 
import { put } from 'redux-saga/effects';

import { Base64 } from 'js-base64';

function* basicApi(value) {

  
  console.log("==value==",value);
  
  const token = yield localStorage.getItem(process.env.REACT_APP_TOKEN);

  console.log(token, '====token====value=========');
  
  let authorization = value.authourization
    ? value.authourization === 'Basic'
      ? 'Basic ' + Base64.btoa(value.body.number + ':' + value.body.password)
      : `Bearer ${token}`
    : `Bearer ${token}`;

    console.log("==authorization==",authorization);
    

  const authHeader = {
    Accept: 'application/json',
    'Content-Type': 'application/json',
    Authorization: authorization
  };

  console.log("==authHeader==", authHeader);
  
  const noauthHeader = {
    Accept: 'application/json',
    'Content-Type': 'application/json'
  };

  try {
    const responseCrud = yield fetch(`${value.api}`, {
      method: `${value.method}`,
      headers: value.authourization !== null ? authHeader : noauthHeader,
      body: value.body ? value.body : null
      // body: value.body ? JSON.stringify(value.body) : null
    });
console.log("==responseCrud==",responseCrud);


    if (!responseCrud.ok) {
      throw responseCrud;
    } else {
      if (responseCrud.status === 204) {
        yield put({
          type: `${value.successAction.type}`,
          payload: value.payload
        });
        return { status: 204, msg: 'Updated Successfully' };
      } else {
        const responseData = yield responseCrud.json();
        yield put({
          type: `${value.successAction.type}`,
          payload: responseData
        });
        return responseData;
      }
    }
  } catch (error) {
    console.error('error', error);

    yield put({
      type: `${value.failAction.type}`,
      payload: error
    });
  }
}

export default { basicApi };

